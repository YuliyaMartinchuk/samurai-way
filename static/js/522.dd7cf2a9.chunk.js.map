{"version":3,"file":"static/js/522.dd7cf2a9.chunk.js","mappings":"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","sources":["redux/actions/profileActions.ts","webpack://samurai-way/./src/components/Profile/ProfileInfo/Profileinfo.module.css?56c6","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/Profileinfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/PostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","redux/thunks/profileThunks.ts","components/common/Preloader/FormsControls/FormsControls.tsx","hok/withAuthRedirect/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/Preloader/FormsControls/FormsControls.module.css?aa49","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["import {\r\n    PROFILE_ADD_POST, PROFILE_DELETE_POST,\r\n    PROFILE_SET_STATUS,\r\n    PROFILE_SET_USER_PROFILE\r\n} from \"./actionTypeTitle\";\r\nimport {ProfileType} from \"../reducers/profileReducer\";\r\n\r\nexport type ProfileActionsTypes =\r\n    | ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n    | ReturnType<typeof deletePostAC>\r\n\r\n\r\nexport const addPostAC = (newPostText: string) => ({\r\n    type: PROFILE_ADD_POST,\r\n    newPostText\r\n} as const)\r\n\r\nexport const setUserProfile = (profile: ProfileType | null) => ({\r\n    type: PROFILE_SET_USER_PROFILE,\r\n    payload: {profile}\r\n} as const)\r\n\r\nexport const setUserStatus = (status: string) => ({\r\n    type: PROFILE_SET_STATUS,\r\n    payload: {status}\r\n} as const)\r\n\r\n\r\nexport const deletePostAC = (id: number) => ({\r\n    type: PROFILE_DELETE_POST,\r\n    payload: {id}\r\n} as const)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileUserCard\":\"Profileinfo_profileUserCard__Bk-h0\",\"profileUserCardImage\":\"Profileinfo_profileUserCardImage__4kCgn\",\"backgroundImage\":\"Profileinfo_backgroundImage__VKJ7F\",\"avatar\":\"Profileinfo_avatar__yc+8Q\",\"descriptionBlock\":\"Profileinfo_descriptionBlock__DV-dO\",\"status\":\"Profileinfo_status__tfxjw\",\"contacts\":\"Profileinfo_contacts__RvWpJ\",\"otherDescription\":\"Profileinfo_otherDescription__lRov8\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./Profileinfo.module.css\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    const {status, updateStatus} = props\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [localStatus, setLocalStatus] = useState<string>(status)\r\n\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(status)\r\n    }, [status])\r\n\r\n    const onStatusChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(localStatus)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                <span\r\n                    className={s.status}\r\n                    onDoubleClick={activateEditMode}\r\n                >{props.status || 'No status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        className={s.status}\r\n                        autoFocus={true}\r\n                        onBlur={deActivateEditMode}\r\n                        onChange={onStatusChanged}\r\n                        value={localStatus}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Profileinfo.module.css\"\r\nimport {ProfileType} from \"../../../redux/reducers/profileReducer\";\r\nimport backgroundImage from \"../../../assets/images/backgroundImage.jpg\"\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport defaultUserPhoto from \"../../../assets/images/defaultUserPhoto.jpg\"\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileUserCard}>\r\n            <div className={s.profileUserCardImage}>\r\n                <img className={s.backgroundImage} src={backgroundImage} alt={\"background image\"}/>\r\n                <img className={s.avatar} src={profile?.photos.large || defaultUserPhoto} alt={\"profile photo\"}/>\r\n            </div>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <h1>{profile.fullName}</h1>\r\n                <p className={s.status}>{profile?.aboutMe}</p>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <div className={s.contacts}>\r\n                    <span>My contacts: </span>\r\n                    <span>{profile.contacts.website ? `${profile.contacts.website} | ` : null}</span>\r\n                    <span>{profile.contacts.github ? `${profile.contacts.github} | ` : null}</span>\r\n                    <span>{profile.contacts.facebook ? `${profile.contacts.facebook} | ` : null}</span>\r\n                    <span>{profile.contacts.instagram ? `${profile.contacts.instagram} | ` : null}</span>\r\n                    <span>{profile.contacts.mainLink ? `${profile.contacts.mainLink} | ` : null}</span>\r\n                    <span>{profile.contacts.twitter ? `${profile?.contacts.twitter} | ` : null}</span>\r\n                    <span>{profile.contacts.vk ? `${profile?.contacts.vk} | ` : null}</span>\r\n                    <span>{profile.contacts.youtube ? `${profile?.contacts.youtube}` : null}</span>\r\n                </div>\r\n                <div className={s.otherDescription}>\r\n                    <span>Job search: </span>\r\n                    <span>{profile?.lookingForAJob}</span>\r\n                    <span>{profile?.lookingForAJobDescription}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__zkHB8\",\"posts\":\"MyPosts_posts__dhHo3\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__uQCxA\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\ntype PostPropsType ={\r\n    message:string,\r\n    likesCount:number\r\n\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props:PostPropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://i.pinimg.com/564x/1d/93/7f/1d937faee0026150d54b97df59c0af81.jpg\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {\r\n    maxLengthCreator,\r\n    required\r\n} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/Preloader/FormsControls/FormsControls\";\r\n\r\n\r\nexport type AddPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 =  maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props: InjectedFormProps<AddPostFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Enter your post\"}\r\n                       name={\"newPostText\"}\r\n                       component={Textarea}\r\n                       validate = {[required, maxLength10]}\r\n                >\r\n                </Field>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostFormReduxForm = reduxForm<AddPostFormType>({\r\n    form: \"addPostForm\"\r\n})(AddNewPostForm)\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {PostsProps} from \"./MyPostsContainer\";\r\nimport {AddNewPostFormReduxForm, AddPostFormType} from \"./PostsForm\";\r\n\r\nconst  MyPosts = React.memo((props: PostsProps) => {\r\n    console.log(\"render\")\r\n    const postsElement =\r\n        props.posts.map((p, index) => <Post key={index}\r\n                                            message={p.message}\r\n                                            likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (values: AddPostFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport { PostType} from \"../../../redux/reducers/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPostAC} from \"../../../redux/actions/profileActions\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostBody:string) => void\r\n}\r\n\r\nexport type PostsProps = MapStateToPropsType &  MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/Profileinfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\n\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = ({profile, status, updateStatus}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status}  updateStatus={updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>)\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    InitialStateType,\r\n    ProfileType\r\n} from \"../../redux/reducers/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirectComponent} from \"../../hok/withAuthRedirect/withAuthRedirect\";\r\nimport {\r\n    getUserProfileTC,\r\n    getUserStatusTC, updateUserStatusTC\r\n} from \"../../redux/thunks/profileThunks\";\r\nimport {Profile} from \"./Profile\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStateType\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: string| null\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport type OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nexport type ProfilePropsType =\r\n    RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n class ProfileContainerAPI extends React.Component<ProfilePropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId as string\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            getUserProfile: getUserProfileTC,\r\n            getUserStatus: getUserStatusTC,\r\n            updateStatus: updateUserStatusTC\r\n        }),\r\n    withRouter,\r\n    withAuthRedirectComponent)\r\n(ProfileContainerAPI)\r\n","import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../../api/api\";\r\nimport {setUserProfile, setUserStatus} from \"../actions/profileActions\";\r\n\r\nexport const getUserProfileTC = (userId: string) => async (dispatch: Dispatch) => {\r\n    const res = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(res.data))\r\n}\r\n\r\nexport const getUserStatusTC = (userId: string) => async (dispatch: Dispatch) => {\r\n    const res = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(res.data))\r\n}\r\n\r\nexport const updateUserStatusTC = (status: string) => async (dispatch: Dispatch) => {\r\n    const res = await profileAPI.updateStatus(status)\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setUserStatus(status))\r\n    }\r\n}","import React, {\r\n    DetailedHTMLProps, TextareaHTMLAttributes\r\n} from \"react\";\r\nimport {Field, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../../utils/validators/validators\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({input, meta, FormType, ...props})=> {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError? styles.error : \"\")}>\r\n            <div>\r\n                <FormType {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({ ...props}) => {\r\nreturn   <FormControl {...props} FormType=\"textarea\" />\r\n\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormControl {...props} FormType=\"input\" />\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            />{' '}{text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsRedirect = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirectComponent<T>(Component: React.Component<T>){\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        // @ts-ignore\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    const ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const required = (value:string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => (value:string) => {\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__h4H4y\",\"error\":\"FormsControls_error__SRO8Q\",\"formSummaryError\":\"FormsControls_formSummaryError__8eZqo\",\"blink1\":\"FormsControls_blink1__MPeL+\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["setUserStatus","status","type","PROFILE_SET_STATUS","payload","ProfileStatusWithHooks","props","updateStatus","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","localStatus","setLocalStatus","useEffect","_jsxs","children","_jsx","className","s","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","value","_ref","profile","src","backgroundImage","alt","photos","large","defaultUserPhoto","fullName","aboutMe","contacts","website","concat","github","facebook","instagram","mainLink","twitter","vk","youtube","lookingForAJob","lookingForAJobDescription","Preloader","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","React","console","log","postsElement","posts","map","p","index","Post","values","addPost","newPostText","connect","state","profilePage","dispatch","PROFILE_ADD_POST","addPostAC","MyPosts","Profile","ProfileInfo","MyPostsContainer","ProfileContainerAPI","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","_objectSpread","compose","auth","isAuth","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","profileAPI","sent","data","PROFILE_SET_USER_PROFILE","stop","_x","_ref2","_callee2","_context2","_x2","_ref3","_callee3","_context3","resultCode","_x3","withRouter","withAuthRedirectComponent","FormControl","input","meta","FormType","_objectWithoutProperties","_excluded","hasError","error","touched","styles","Object","assign","_objectDestructuringEmpty","Input","createField","validators","text","length","undefined","mapStateToPropsRedirect","Component","restProps","Redirect","to","maxLength","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_r","_arr","_n","_d","call","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}