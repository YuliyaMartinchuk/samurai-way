{"version":3,"file":"static/js/111.25f5e4e6.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/ Dialogs/Dialogs.module.css?1cb3","components/ Dialogs/DialogItem/DialogItem.tsx","components/ Dialogs/Message/Message.tsx","components/ Dialogs/DialogsForm.tsx","components/ Dialogs/Dialogs.tsx","components/ Dialogs/DialogsContainer.tsx","redux/actions/dialogsAction.ts","components/common/FormsControls/FormsControls.tsx","hok/withAuthRedirect/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__4Ad1J\",\"dialogsItems\":\"Dialogs_dialogsItems__ihe6W\",\"dialog\":\"Dialogs_dialog__4540R\",\"active\":\"Dialogs_active__Z-GAO\",\"messages\":\"Dialogs_messages__+7Tks\",\"message\":\"Dialogs_message__W5p+Q\"};","import React from 'react';\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogsPropsType) => {\r\n    let path = \"/dialogs/1\" + props.id\r\n    return <div className={s.dialog + \" \" + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\nexport type MessagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n// let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n// const addMessage = () => {\r\n//     let message = newMessageElement.current?.value\r\n//     alert(message)\r\n// }\r\n\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (<>\r\n            <div className={s.dialogs}>{props.message}\r\n            </div>\r\n            <div>\r\n                {/*<textarea ref={newMessageElement}></textarea>*/}\r\n            </div>\r\n            <div>\r\n                {/*<button onClick={addMessage}>Add message</button>*/}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type FormAddMessageDataType = {\r\n    newMassageBody: string\r\n}\r\n\r\nconst maxLength =  maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<FormAddMessageDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Enter your message\"}\r\n                       name={\"newMassageBody\"}\r\n                       component={Textarea}\r\n                       validate = {[required, maxLength]}\r\n                >\r\n                </Field>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormReduxForm = reduxForm<FormAddMessageDataType>({\r\n    form: \"dialogsForm\"\r\n})(AddMessageForm)\r\n","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsProps} from \"./DialogsContainer\";\r\nimport {AddMessageFormReduxForm, FormAddMessageDataType} from \"./DialogsForm\";\r\n\r\n\r\nconst Dialogs = (props: DialogsProps) => {\r\n    const state = props.dialogsPage\r\n    const dialogsElement = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    const messageElement = state.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>)\r\n\r\n    const addNewMessage = (values:FormAddMessageDataType) => {\r\n        props.sendMessage(values.newMassageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElement}</div>\r\n                <AddMessageFormReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs\r\n\r\n","import React from 'react';\r\nimport {initialStateType} from \"../../redux/reducers/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    withAuthRedirectComponent\r\n} from \"../../hok/withAuthRedirect/withAuthRedirect\";\r\nimport {sendMessageAC} from \"../../redux/actions/dialogsAction\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: initialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMassageBody:string) => void\r\n}\r\n\r\nexport type DialogsProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n    {sendMessage:sendMessageAC }),\r\n    withAuthRedirectComponent)(Dialogs )\r\n\r\n\r\n","import {\r\n    APP_INITIALIZED_SUCCESS, DIALOGS_SEND_MESSAGE\r\n} from \"./actionTypeTitle\";\r\n\r\n\r\nexport type DialogsActionTypes =\r\n    ReturnType<typeof sendMessageAC>\r\n\r\n\r\nexport const initializedSuccess = () => ({\r\n    type: APP_INITIALIZED_SUCCESS\r\n} as const)\r\n\r\nexport const sendMessageAC = (newMassageBody:string) => ({type: DIALOGS_SEND_MESSAGE, newMassageBody} as const)\r\n\r\n\r\n\r\n","import React, {\r\n    DetailedHTMLProps, TextareaHTMLAttributes\r\n} from \"react\";\r\nimport {Field, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({input, meta, FormType, ...props})=> {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError? styles.error : \"\")}>\r\n            <div>\r\n                <FormType {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({ ...props}) => {\r\nreturn   <FormControl {...props} FormType=\"textarea\" />\r\n\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormControl {...props} FormType=\"input\" />\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            />{' '}{text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsRedirect = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirectComponent<T>(Component: React.Component<T>){\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        // @ts-ignore\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    const ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const required = (value:string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => (value:string) => {\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__ZFy6E\",\"error\":\"FormsControls_error__Ph5O6\",\"formSummaryError\":\"FormsControls_formSummaryError__iiPnC\",\"blink1\":\"FormsControls_blink1__XLlQ+\"};"],"names":["DialogItem","props","path","id","_jsx","className","s","children","NavLink","to","name","Message","_jsxs","_Fragment","message","maxLength","maxLengthCreator","AddMessageFormReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","state","dialogsPage","dialogsElement","dialogs","map","d","messageElement","messages","m","values","sendMessage","newMassageBody","compose","connect","type","DIALOGS_SEND_MESSAGE","withAuthRedirectComponent","Dialogs","FormControl","_ref","input","meta","FormType","_objectWithoutProperties","_excluded","hasError","error","touched","styles","_objectSpread","_ref2","Object","assign","_objectDestructuringEmpty","Input","_ref3","createField","validators","text","arguments","length","undefined","mapStateToPropsRedirect","isAuth","auth","Component","restProps","Redirect","value","concat"],"sourceRoot":""}