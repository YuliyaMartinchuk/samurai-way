{"version":3,"file":"static/js/93.fb3d31b8.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Login/Login.module.css?3530","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Login_wrapper__3-sPW\",\"container\":\"Login_container__C2HOx\",\"testLoginInfo\":\"Login_testLoginInfo__N9AG1\",\"titleWrapper\":\"Login_titleWrapper__5QqnP\",\"title\":\"Login_title__grGK5\",\"loginInput\":\"Login_loginInput__20G42\",\"loginForm\":\"Login_loginForm__coCRx\",\"formSummaryError\":\"Login_formSummaryError__0kaTE\",\"blink1\":\"Login_blink1__YQmzV\",\"loginButton\":\"Login_loginButton__O4lC4\",\"rememberMeContainer\":\"Login_rememberMeContainer__7bq68\",\"checkboxText\":\"Login_checkboxText__EtLFB\"};","import React from 'react'\r\nimport {\r\n    InjectedFormProps,\r\n    reduxForm\r\n} from 'redux-form'\r\nimport {\r\n    createField, GetStringKeys,\r\n    Input\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport s from \"../Login.module.css\"\r\n\r\nexport type FormDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha:  string | null\r\n}\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\ntype AllSampleFormProps = LoginFormPropsType & InjectedFormProps<FormDataType, LoginFormPropsType>\r\n\r\nexport const LoginForm: React.FC<AllSampleFormProps> = ({error, handleSubmit,captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.loginForm}>\r\n            <div >\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input,{className: s.loginInput}, 'Email Address')}\r\n            </div>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {className: s.loginInput, type: 'password'}, 'Password')}\r\n            </div>\r\n            <div className={s.rememberMeContainer}>\r\n                {createField<LoginFormValuesTypeKeys>(\"\", \"rememberMe\", [], Input, {type: 'checkbox', className: s.checkbox}, \"\")}\r\n                <label htmlFor=\"rememberMe\" className={s.checkboxText}>Remember me</label>\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl} alt={\"captchaUrl\"}/>}\r\n            {captchaUrl &&\r\n                createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input)}\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button className={s.loginButton}>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType,LoginFormPropsType>({\r\n    form: \"login\"\r\n})(LoginForm)\r\n","import React from 'react';\r\n\r\nimport {FormDataType, LoginReduxForm} from \"./LoginForm\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/thunks/authThunks\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from \"./Login.module.css\"\r\n\r\ntype LoginType = {\r\n    login: (formData: FormDataType) => void\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const Login: React.FC<LoginType> = ({login, isAuth, captchaUrl}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData)\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.container}>\r\n                <div className={s.titleWrapper}>\r\n                    <hr/>\r\n                    <p className={s.title}>Login</p>\r\n                    <hr/>\r\n                </div>\r\n                <LoginReduxForm\r\n                    onSubmit={onSubmit}\r\n                    captchaUrl={captchaUrl}/>\r\n            </div>\r\n            <div className={s.testLoginInfo}>\r\n                <p>To log in get registered here:</p>\r\n                <p>\r\n                    <a href={'https://social-network.samuraijs.com/'} target={'_blank'} rel=\"noreferrer\">\r\n                        {' '}\r\n                        https://social-network.samuraijs.com/\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        login: loginTC\r\n    }),\r\n)(Login)\r\n","import React, {\r\n    DetailedHTMLProps, TextareaHTMLAttributes\r\n} from \"react\";\r\nimport {Field, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({input, meta, FormType, ...props})=> {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError? styles.error : \"\")}>\r\n            <div>\r\n                <FormType {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({ ...props}) => {\r\nreturn   <FormControl {...props} FormType=\"textarea\" />\r\n\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormControl {...props} FormType=\"input\" />\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        className?: string,\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            />{' '}{text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import React from \"react\";\r\n\r\n\r\nexport const required = (value:string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => (value:string) => {\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__ZFy6E\",\"error\":\"FormsControls_error__Ph5O6\",\"formSummaryError\":\"FormsControls_formSummaryError__iiPnC\",\"blink1\":\"FormsControls_blink1__XLlQ+\"};"],"names":["LoginReduxForm","reduxForm","form","_ref","error","handleSubmit","captchaUrl","_jsxs","onSubmit","className","s","children","_jsx","createField","required","Input","type","htmlFor","src","alt","Login","login","isAuth","Redirect","to","formData","href","target","rel","compose","connect","state","auth","loginTC","FormControl","input","meta","FormType","props","_objectWithoutProperties","_excluded","hasError","touched","styles","_objectSpread","Textarea","_ref2","Object","assign","_objectDestructuringEmpty","_ref3","placeholder","name","validators","component","text","arguments","length","undefined","Field","validate","value","maxLengthCreator","maxLength","concat"],"sourceRoot":""}