{"version":3,"file":"static/js/570.62b50379.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/ Dialogs/Dialogs.module.css?1cb3","webpack://samurai-way/./src/components/ Dialogs/DialogItem/DialogItems.module.css?b965","components/ Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/ Dialogs/Message/Message.module.css?142f","components/ Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/ Dialogs/DialogsForm/DialogsForm.module.css?74f4","components/ Dialogs/DialogsForm/DialogsForm.tsx","components/ Dialogs/Dialogs.tsx","components/ Dialogs/DialogsContainer/DialogsContainer.tsx","redux/actions/dialogsAction.ts","components/common/FormsControls/FormsControls.tsx","hok/withAuthRedirect/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Dialogs_container__UXWai\",\"dialogsItems\":\"Dialogs_dialogsItems__ihe6W\",\"messages\":\"Dialogs_messages__+7Tks\",\"messages__items\":\"Dialogs_messages__items__P6cL7\",\"messages__item\":\"Dialogs_messages__item__Dqrv2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DialogItems_container__Eplmg\",\"item\":\"DialogItems_item__OGMO3\",\"item__image\":\"DialogItems_item__image__2zNtU\",\"item__avatar\":\"DialogItems_item__avatar__TrJCo\",\"userAndMessage\":\"DialogItems_userAndMessage__VU52v\",\"item__userName\":\"DialogItems_item__userName__a+iPJ\",\"userMessage\":\"DialogItems_userMessage__Y1kci\"};","import React from 'react';\r\nimport s from \"./DialogItems.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogUserType} from \"../../../redux/reducers/dialogsReducer\";\r\n\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    id: number\r\n    dialog: DialogUserType\r\n}\r\n\r\nexport const DialogItem = (props: DialogsPropsType) => {\r\n    const {id, dialog} = props\r\n    let path = `/dialogs/${id}`\r\n    return <div className={s.container}>\r\n        <NavLink key={dialog.id} to={path}>\r\n            <li className={s.item}>\r\n                <div className={s.item__image}>\r\n                    <img className={s.item__avatar} src={dialog.avatar} alt=\"contact-avatar\"/>\r\n                </div>\r\n                <div className={s.userAndMessage}>\r\n                    <div className={s.item__userName}>\r\n                        {`${dialog.userFirstName} ${dialog.userLastName}`}\r\n                    </div>\r\n                    <div className={s.userMessage}>\r\n                        'Sed diam nonummy nibh euismod tincidunt ut laoreet dolore'\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        </NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Message_container__t5Umr\",\"messages__item\":\"Message_messages__item__kYypN\"};","import React from 'react';\r\nimport s from \"./Message.module.css\"\r\n\r\n\r\nexport type MessagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    const {message} = props\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.messages__item}>{message}</div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DialogsForm_container__W49DF\",\"textareaButtonBlock\":\"DialogsForm_textareaButtonBlock__61nCh\",\"textarea\":\"DialogsForm_textarea__uNGEg\",\"button\":\"DialogsForm_button__7uKal\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport s from \"./DialogsForm.module.css\";\r\n\r\nexport type FormAddMessageDataType = {\r\n    newMassageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<FormAddMessageDataType>) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div className={s.textareaButtonBlock}>\r\n                    <div>\r\n                        <Field placeholder={\"Enter your message\"}\r\n                               name={\"newMassageBody\"}\r\n                               className={s.textarea}\r\n                               component={Textarea}\r\n                               validate={[required, maxLength]}\r\n                        >\r\n                        </Field>\r\n                    </div>\r\n                    <div>\r\n                        <button className={s.button}>Send</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormReduxForm = reduxForm<FormAddMessageDataType>({\r\n    form: \"dialogsForm\"\r\n})(AddMessageForm)\r\n","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem\";\r\nimport {Message} from \"./Message\";\r\nimport {AddMessageFormReduxForm, FormAddMessageDataType} from \"./DialogsForm\";\r\nimport {DialogsProps} from \"./DialogsContainer\";\r\n\r\n\r\nconst Dialogs = (props: DialogsProps) => {\r\n    const state = props.dialogsPage\r\n    const dialogsElement = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} dialog={d}/>)\r\n    const messageElement = state.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>)\r\n\r\n    const addNewMessage = (values:FormAddMessageDataType) => {\r\n        props.sendMessage(values.newMassageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div className={s.messages__items}>{messageElement}</div>\r\n                <AddMessageFormReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs\r\n\r\n","import React from 'react';\r\nimport {initialStateType} from \"../../../redux/reducers/dialogsReducer\";\r\nimport Dialogs from \"../Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    withAuthRedirectComponent\r\n} from \"../../../hok/withAuthRedirect/withAuthRedirect\";\r\nimport {sendMessageAC} from \"../../../redux/actions/dialogsAction\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: initialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMassageBody:string) => void\r\n}\r\n\r\nexport type DialogsProps = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n    {sendMessage:sendMessageAC }),\r\n    withAuthRedirectComponent)(Dialogs )\r\n\r\n\r\n","import {\r\n    APP_INITIALIZED_SUCCESS, DIALOGS_SEND_MESSAGE\r\n} from \"./actionTypeTitle\";\r\n\r\n\r\nexport type DialogsActionTypes =\r\n    ReturnType<typeof sendMessageAC>\r\n\r\n\r\nexport const initializedSuccess = () => ({\r\n    type: APP_INITIALIZED_SUCCESS\r\n} as const)\r\n\r\nexport const sendMessageAC = (newMassageBody:string) => ({type: DIALOGS_SEND_MESSAGE, newMassageBody} as const)\r\n\r\n\r\n\r\n","import React, {\r\n    DetailedHTMLProps, TextareaHTMLAttributes\r\n} from \"react\";\r\nimport {Field, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({input, meta, FormType, ...props})=> {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError? styles.error : \"\")}>\r\n            <div>\r\n                <FormType {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({ ...props}) => {\r\nreturn   <FormControl {...props} FormType=\"textarea\" />\r\n\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormControl {...props} FormType=\"input\" />\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        className?: string,\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            />{' '}{text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsRedirect = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirectComponent<T>(Component: React.Component<T>){\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        // @ts-ignore\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    const ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","import React from \"react\";\r\n\r\n\r\nexport const required = (value:string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => (value:string) => {\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__ZFy6E\",\"error\":\"FormsControls_error__Ph5O6\",\"formSummaryError\":\"FormsControls_formSummaryError__iiPnC\",\"blink1\":\"FormsControls_blink1__XLlQ+\"};"],"names":["DialogItem","props","id","dialog","path","concat","_jsx","className","s","children","NavLink","to","_jsxs","src","avatar","alt","userFirstName","userLastName","Message","message","maxLength","maxLengthCreator","AddMessageFormReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","state","dialogsPage","dialogsElement","dialogs","map","d","messageElement","messages","m","values","sendMessage","newMassageBody","compose","connect","type","DIALOGS_SEND_MESSAGE","withAuthRedirectComponent","Dialogs","FormControl","_ref","input","meta","FormType","_objectWithoutProperties","_excluded","hasError","error","touched","styles","_objectSpread","_ref2","Object","assign","_objectDestructuringEmpty","Input","_ref3","createField","validators","text","arguments","length","undefined","mapStateToPropsRedirect","isAuth","auth","Component","restProps","Redirect","value"],"sourceRoot":""}