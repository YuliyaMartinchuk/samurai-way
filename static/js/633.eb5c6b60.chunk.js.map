{"version":3,"file":"static/js/633.eb5c6b60.chunk.js","mappings":"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","sources":["components/Login/LoginForm.tsx","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from 'react'\r\nimport {\r\n    InjectedFormProps,\r\n    reduxForm\r\n} from 'redux-form'\r\nimport {\r\n    createField, GetStringKeys,\r\n    Input\r\n} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport style from \"../common/FormsControls/FormsControls.module.css\"\r\n\r\nexport type FormDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha:  string | null\r\n}\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\ntype AllSampleFormProps = LoginFormPropsType & InjectedFormProps<FormDataType, LoginFormPropsType>\r\n\r\nexport const LoginForm: React.FC<AllSampleFormProps> = ({error, handleSubmit,captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            </div>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: 'password'})}\r\n            </div>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"\", \"rememberMe\", [], Input, {type: 'checkbox'}, \"rememberMe\")}\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl} alt={\"captchaUrl\"}/>}\r\n            {captchaUrl &&\r\n                createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input)}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType,LoginFormPropsType>({\r\n    form: \"login\"\r\n})(LoginForm)\r\n","import React from 'react';\r\n\r\nimport {FormDataType, LoginReduxForm} from \"./LoginForm\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/thunks/authThunks\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype LoginType = {\r\n    login: (formData: FormDataType) => void\r\n    isAuth: boolean\r\n    captchaUrl:string|null\r\n}\r\n\r\nexport const Login: React.FC<LoginType> = ({login, isAuth, captchaUrl}) => {\r\n    const onSubmit = (formData:FormDataType) => {\r\n       login(formData)\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl:string|null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        login:loginTC\r\n    }),\r\n)(Login)\r\n","import React, {\r\n    DetailedHTMLProps, TextareaHTMLAttributes\r\n} from \"react\";\r\nimport {Field, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({input, meta, FormType, ...props})=> {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError? styles.error : \"\")}>\r\n            <div>\r\n                <FormType {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({ ...props}) => {\r\nreturn   <FormControl {...props} FormType=\"textarea\" />\r\n\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormControl {...props} FormType=\"input\" />\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            />{' '}{text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import React from \"react\";\r\n\r\n\r\nexport const required = (value:string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n\r\n}\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => (value:string) => {\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__ZFy6E\",\"error\":\"FormsControls_error__Ph5O6\",\"formSummaryError\":\"FormsControls_formSummaryError__iiPnC\",\"blink1\":\"FormsControls_blink1__XLlQ+\"};"],"names":["LoginReduxForm","reduxForm","form","_ref","error","handleSubmit","captchaUrl","_jsxs","onSubmit","children","_jsx","createField","required","Input","type","src","alt","className","style","Login","login","isAuth","Redirect","to","formData","compose","connect","state","auth","loginTC","FormControl","input","meta","FormType","props","_objectWithoutProperties","_excluded","hasError","touched","styles","_objectSpread","Textarea","_ref2","Object","assign","_objectDestructuringEmpty","_ref3","placeholder","name","validators","component","text","arguments","length","undefined","Field","validate","value","maxLengthCreator","maxLength","concat"],"sourceRoot":""}